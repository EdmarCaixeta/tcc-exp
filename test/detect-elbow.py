from sklearn.cluster import KMeans
from sklearn import metrics
from scipy.spatial.distance import cdist
import numpy as np
import matplotlib.pyplot as plt

if __name__ == "__main__":
    x = [6222, 7111, 8667, 6444, 7556, 9556, 4889, 7778, 8889, 8222, 4444, 5111, 4889, 
        7333, 5333, 5778, 8222, 6222, 8222, 5556, 5111, 5778, 4889, 7556, 6667, 5333, 4222, 
        3778, 6000, 5333, 7333, 7556, 10000, 8444, 6889, 6889, 7111, 6000, 6444, 7111, 6667, 
        7111, 4000, 7778, 4222, 5333, 6444, 3111, 13333, 5333, 10444, 6667, 7111, 4889, 6444, 
        6222, 5111, 6000, 6889, 8000, 3556, 5778, 7111, 6222, 6000, 7333, 7556, 5333, 6000, 
        5111, 5111, 4444, 6222, 3556, 2889, 4444, 6444, 6000, 3778, 4000, 3556, 2889, 2667, 
        6000, 3778, 4000, 3778, 4444, 5111, 4222, 5556, 2667, 4889, 6444, 5556, 3778, 4444, 
        4000, 4444, 3111, 6444, 3556, 3111, 4667, 4889, 5556, 5111, 6000, 5556, 3778, 7333, 
        5333, 6000, 7111, 6667, 7111, 10889, 6667, 6667, 4222, 6000, 7556, 6667, 8000, 3111, 9556, 
        7556, 9111, 9333, 3333, 6667, 7111, 7778, 6222, 5778, 8222, 4889, 5111, 5111, 4000, 6222, 
        7333, 6222, 6222, 6444, 9556, 6667, 5556, 8667, 4000, 6667, 3556, 6667, 6222, 8889, 6667, 
        7333, 4444, 5333, 5333, 8000, 5556, 8222, 2667, 4000, 7333, 7111, 5778, 6222, 3333, 6667, 
        7556, 3778, 4222, 5333, 5778, 6889, 6667, 8000, 6444, 6667, 5556, 4000, 4667, 4444, 5333, 
        6222, 3556, 4667, 3556, 3556, 4000, 5556, 4444, 5778, 5556, 4667, 4444, 6222, 6222, 5333, 
        6667, 4444, 4222, 6000, 3111, 2889, 4889, 5778, 5778, 3111, 3778, 5778, 3111, 4222, 4889, 
        3333, 6667, 6667, 3333, 5556, 6000, 8667, 3111, 12889, 7778, 7556, 7333, 6000, 4889, 7111, 
        6222, 6667, 5333, 5333, 5556, 4222, 5333, 3778, 5333, 5333, 5778, 5556, 5778, 5556, 6667, 
        5778, 5778, 7333, 7556, 5333, 8889, 8444, 4889, 4444, 5111, 5556, 6222, 7111, 10000, 6000, 
        8444, 8444, 6444, 7778, 10000, 5778, 8000, 7111, 8000, 12667, 12000, 3333, 2222, 11333, 
        8222, 14000, 6222, 1556, 6000, 9333, 15333, 4667, 10889, 7333, 11778, 6667, 10000, 8222, 
        6889, 7333, 8222, 6667, 9778, 4889, 8444, 5556, 10889, 7778, 8000, 7556, 6000, 6000, 5333,
        4444, 6222, 6889, 7333, 4667, 8222, 9556, 8222, 6222, 8222, 7556, 10889, 8000, 11111, 7111, 
        7778, 4444, 7556, 6000, 7111, 10000, 8222, 8889, 5333, 10889, 4889]

    X = np.array(x).reshape(-1, 1)
    # minimum = np.min(X)
    # maximum = np.max(X)
    # X = np.linspace(minimum, maximum, 5*len(x)).reshape(-1, 1)
    

    distortions = []
    K = range(1,30)
    for k in K:
        kmeanModel = KMeans(n_clusters=k).fit(X)
        kmeanModel.fit(X)
        distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, 'euclidean'), axis=1)) / X.shape[0])

    # Plot the elbow
    plt.plot(K, distortions, 'bx-')
    plt.xlabel('k')
    plt.ylabel('Distortion')
    plt.title('The Elbow Method showing the optimal k')
    plt.show()
